// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
model User {
  employeeId String?
  employee Employee? @relation(fields: [employeeId], references: [employee_id])
  username String?
  email String @id
  password String 
  role String?
  status Status @default(Active)
  createdAt DateTime @default(now()) 
}
model EmployeeIdTracker {
  id              Int  @id @default(autoincrement())
  last_used_number Int @default(0)
}
model Employee {
  employee_id  String   @id
  employeeImg String?
  firstname    String?
  lastname     String?
  dob          DateTime?
  gender       String?
  address      String?
  phone        String?
  email        String?  
  companyEmail String?
  hireDate     DateTime?
  position     String?
  skills       String?
  education    String?
  linkedin     String?
  about        String?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  attendances  Attendance[]
  salaries     Salary[]
  reports employeeReports[]
  employee_Projects employeeProjects[]
  leaveRequests leaveRequests[]
  users User[]
}
model Attendance {
  id Int @id @default(autoincrement())
  employeeId String 
  date DateTime @default(now())
  status String?
  reports String?
  checkin_Time DateTime?
  checkout_Time DateTime?
  companyEmail String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  employee Employee? @relation(fields: [employeeId], references: [employee_id]) 
}
model leaveRequests {
  leave_id Int @id @default(autoincrement())
  employee_id String ?
  employee Employee ? @relation(fields: [employee_id],references: [employee_id])
  leaveType String
  start_Date DateTime
  end_Date DateTime
  status String
  createdAt DateTime
  updatedAt DateTime @updatedAt
}
model employeeLeaves{
  id Int @id @default(autoincrement())
  leaveType String 
  startDate DateTime
  endDate DateTime
  
}
model Salary {
  salary_id Int @id @default(autoincrement())
  employee_id String
  amount Float
  start_Date DateTime
  end_Date DateTime
  createdAt DateTime
  updatedAt DateTime @updatedAt
  employee Employee @relation(fields: [employee_id], references: [employee_id])
}
model Projects {
  project_id Int @id @default(autoincrement())
  project_Name String
  start_Date DateTime
  end_Date DateTime
  budget Float
  manager_id Int
  createdAt DateTime
  updatedAt DateTime @updatedAt
  employeeProjects employeeProjects[]
}
model employeeReports{
  id Int @id @default(autoincrement())
  employeeId String ?
  employeeEmail String ?
  report String
  employee Employee?@relation(fields: [employeeId],references: [employee_id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model employeeProjects {
  employee_project_id Int @id @default(autoincrement())
  employee_id String
  project_id Int
  role String
  start_Date DateTime
  end_Date DateTime 
  createdAt DateTime
  updatedAt DateTime @updatedAt
  employee Employee @relation(fields: [employee_id], references: [employee_id])
  project Projects @relation(fields: [project_id], references: [project_id])
}
//enums
enum Role {
  Employee
  Admin
  Intern 
  Manager
}
enum Status {
  Active
  Disabled
}
